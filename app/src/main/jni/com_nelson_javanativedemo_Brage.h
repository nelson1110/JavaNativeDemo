/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_nelson_javanativedemo_Brage */
#include <stdio.h>
#include <stdlib.h>

#ifndef _Included_com_nelson_javanativedemo_Brage
#define _Included_com_nelson_javanativedemo_Brage
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_nelson_javanativedemo_Brage
 * Method:    doInNative
 * Signature: ()I
 */
JNIEXPORT jstring JNICALL Java_com_nelson_javanativedemo_Brage_doInNative
  (JNIEnv * evn, jobject obj);

JNIEXPORT void JNICALL Java_com_nelson_javanativedemo_Brage_callbackJava
        (JNIEnv *env, jclass type, jobject context);

JNIEXPORT void JNICALL TrendsMethod
        (JNIEnv *env, jclass type, jobject context);

static const JNINativeMethod gJni_Methods_table[] = {{
    "doInNativeTrends","(Landroid/content/Context;)V",(void *)TrendsMethod
}};

static int jniRegisterNativeMethods(JNIEnv* env, const char* className,
                                    const JNINativeMethod* gMethods, int numMethods)
{
    jclass clazz;

    clazz = (env)->FindClass( className);
    if (clazz == NULL) {
        return -1;
    }

    int result = 0;
    if ((env)->RegisterNatives(clazz, gMethods, numMethods) < 0) {
        result = -1;
    }

    (env)->DeleteLocalRef(clazz);
    return result;
}

jint JNI_OnLoad(JavaVM* vm, void* reserved){

    JNIEnv* env = NULL;
    jint result = -1;

    if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
        return result;
    }

    jniRegisterNativeMethods(env, "com/nelson/javanativedemo/Brage", gJni_Methods_table, sizeof(gJni_Methods_table) / sizeof(JNINativeMethod));

    return JNI_VERSION_1_4;
}

#ifdef __cplusplus
}
#endif
#endif
